datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  codeExecutions CodeExecution[]
  snippets       Snippet[]
  Star           Star[]
  SnippetComment SnippetComment[]
}

model CodeExecution {
  id        String   @id @default(cuid())
  userId    String
  language  String
  code      String
  output    String?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model Snippet {
  id        String   @id @default(cuid())
  userId    String
  title     String
  language  String
  code      String
  userName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  Star           Star[]
  SnippetComment SnippetComment[]
  @@index([userId])
}

model SnippetComment {
  id        String   @id @default(cuid())
  snippetId String
  userId    String
  userName  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([snippetId])
}

model Star {
  id        String   @id @default(cuid())
  userId    String
  snippetId String
  createdAt DateTime @default(now())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  @@unique([userId, snippetId])
  @@index([userId])
  @@index([snippetId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([userId, credentialID])
}